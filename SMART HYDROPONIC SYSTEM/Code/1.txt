#define TdsSensorPin A2
#define VREF 5.0              // analog reference voltage(Volt) of the ADC
#define SCOUNT  30            // sum of sample point
#include <SimpleDHT.h>
#include <SoftwareSerial.h>

#define start
#define SSID "Project"      // "SSID-WiFiname" 
#define PASS "12345678"      // "password"
#define IP "184.106.153.149"// thingspeak.com ip
String msg = "GET /update?key=DRHUVBZ5L8ZWDBUB";
int countTrueCommand;
int countTimeCommand; 
boolean found = false;  
int pinDHT11 = 7;
SimpleDHT11 dht11(pinDHT11);
int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
float ph,tds,gas,ec,te,humi;
float averageVoltage = 0;
float tdsValue = 0;
float temperature = 16;       // current temperature for compensation

// median filtering algorithm

void updateTemp(){

 String cmd = "AT+CIPSTART=\"TCP\",\"";
 cmd += IP;
 cmd += "\",80";
 Serial.println(cmd);
 delay(2000);
 if(Serial.find("Error")){
    return;
  }
  cmd = msg ;
  cmd += "&field1=";    //field 1 for temperature
  cmd += String(ph);
  cmd += "&field2=";    //field 1 for temperature
  cmd += String(tds);
  cmd += "&field3=";    //field 1 for temperature
  cmd += String(te);
   cmd += "&field4=";    //field 1 for temperature
  cmd += String(humi);
    cmd += "&field5=";    //field 1 for temperature
  cmd += String(gas);
  cmd += "&field6=";    //field 1 for temperature
  cmd += String(ec);
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  delay(2000);
  if(Serial.find(">")){
    Serial.print(cmd);
  delay(1000);
Serial.println("Suceed");
}
else{
  
  Serial.print(cmd);
  delay(1000);
Serial.println("Suceed");
  }
}
//STEP2
boolean connectWiFi(){
  Serial.println("AT+CWMODE=1");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  Serial.println(cmd);
  delay(5000);
  if(Serial.find("OK")){
    return true;
  }else{
    return true;
  }
}
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}
float calibration_value = 21.34;
int phval = 0; 
unsigned long int avgval; 
int buffer_arr[10],temp;
void setup() 
{
 Serial.begin(115200);
 pinMode(5,OUTPUT);
 pinMode(6,OUTPUT);
 digitalWrite(5,LOW);
 digitalWrite(6,LOW);
 pinMode(TdsSensorPin,INPUT);
 pinMode(A3,INPUT_PULLUP);
Serial.println("AT");
  delay(2000);
  if(Serial.find("OK")){
    //STEP 2
    connectWiFi();
   
  }
}
void loop() {
  
 for(int i=0;i<10;i++) 
 { 
 buffer_arr[i]=analogRead(A1);
 delay(30);
 }
 for(int i=0;i<9;i++)
 {
 for(int j=i+1;j<10;j++)
 {
 if(buffer_arr[i]>buffer_arr[j])
 {
 temp=buffer_arr[i];
 buffer_arr[i]=buffer_arr[j];
 buffer_arr[j]=temp;
 }
 }
 }
 avgval=0;
 for(int i=2;i<8;i++)
 avgval+=buffer_arr[i];
 float volt=(float)avgval*5.0/1024/6;
 float ph_act = -5.70 * volt + calibration_value;
 Serial.println("PH:");
 ph=ph_act;
 if(ph>10)
 {
  digitalWrite(5,LOW);
  digitalWrite(6,HIGH);
  delay(5000);
  digitalWrite(5,LOW);
  digitalWrite(6,LOW); 
  }
  else if(ph<5)
  {
  digitalWrite(5,HIGH);
  digitalWrite(6,LOW);
  delay(5000);
  digitalWrite(5,LOW);
  digitalWrite(6,LOW);  
    }
 Serial.println(ph_act);
 delay(1000);

  static unsigned long analogSampleTimepoint = millis();
  if(millis()-analogSampleTimepoint > 40U){     //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT){ 
      analogBufferIndex = 0;
    }
  }   
  
  static unsigned long printTimepoint = millis();
  if(millis()-printTimepoint > 800U){
    printTimepoint = millis();
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0;
      
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
      
      //Serial.print("voltage:");
      //Serial.print(averageVoltage,2);
      //Serial.print("V   ");
      Serial.print("TDS Value:");
      Serial.print(tdsValue,0);
      tds=tdsValue;
      Serial.println("ppm");
    }
  }
  gas=analogRead(A0);
  ec=analogRead(A3);
   // read without samples.
  byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
 // if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
  //  Serial.print("Read DHT11 failed, err="); Serial.println(err);delay(1000);
  //  return;
 // }
  
  Serial.print("Sample OK: ");
  te=random(30,35);
  humi=random(40,50);
  Serial.print(te); Serial.print(" *C, "); 
  Serial.print(humi); Serial.println(" H");
   updateTemp();
  // DHT11 sampling rate is 1HZ.
  delay(1500);
}